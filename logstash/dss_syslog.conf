input {
    udp {
        host => "0.0.0.0"
        port => "5514"
        type => "udp"
        tags => [ "pensando_flowlog" ]
    }
}

filter {
  dissect {
    mapping => { 'message' => '<%{[log][syslog_priority]}>%{[log][syslog_version]} %{[event][created]} %{[host][name]} %{[event][provider]} %{[event][provider_id]} %{[log][msg_id]} %{[log][stuctured_data]} %{csv_message}'}
  }
  split {
    field => "csv_message"
  }
  dissect {
    mapping => { 'csv_message' => '%{timestamp},%{[session][state]},%{[session][action]},%{[network][vrf]},%{[source][ip]},%{[source][port]},%{[destination][ip]},%{[destination][port]},%{protocol},%{[session][id]},%{[security][policy_id]},%{[security][rule_id]},%{[security][rule_name]},%{[session][iflow_pkts]},%{[session][iflow_bytes]},%{[session][rflow_pkts]},%{[session][rflow_bytes]},%{[source][vlan]},%{[dsx][type]},%{[dsx][sw_ver]},%{[dsx][ser_num]},%{[dsx][device_name]},%{[dsx][unit_id]},%{[log][version]},%{[security][policy_name]},%{[security][policy_display_name]},%{[nat][src_xltd_ip]},%{[nat][dst_xltd_ip]},%{[nat][dst_xltd_port]},%{[security][encrypted]},%{[session][direction]},%{[session][create_reason]}'}
  }
  date
  {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
  }

  mutate {
        convert => {
          "[source][port]" => "integer"
          "[destination][port]" => "integer"
          "protocol" => "integer"
          "[session][iflow_pkts]" => "integer"
          "[session][iflow_bytes]" => "integer"
          "[session][rflow_pkts]" => "integer"
          "[session][rflow_bytes]" => "integer"
          "[source][vlan]" => "integer"
        }
      }

  ## add human readable protocol name
  if ([protocol] == 6) {
    mutate {
      add_field => {"[network][transport]" => "tcp"}
    }
  }
  else if ([protocol] == 17) {
    mutate {
      add_field => {"[network][transport]" => "udp"}
    }
  }
  else if ([protocol] == 1) {
    mutate {
      add_field => {"[network][transport]" => "icmp"}
    }
  }
  else {
    mutate {
      add_field => {"[network][transport]" => "other"}
    }
  }

  if ([session][create_reason] == 0)  {
    mutate {
      replace => ["[session][create_reason]","FLOW_MISS"]
    }
  }
  else if ([session][create_reason] == 1) {
    mutate {
      replace => ["[session][create_reason]","FLOW_SYNC"]
    }
  }
  else if ([session][create_reason] == 2) {
    mutate {
      replace => ["[session][create_reason]","FULL_SYNC"]
    }
  }
  else {
    mutate {
      replace => ["[session][create_reason]","VMOTION"]
    }
  }


  ruby {
    code => 'event.set("[network][bytes]",(event.get("[session][iflow_bytes]") + event.get("[session][rflow_bytes]")))'
    }

  ruby {
    code => 'event.set("[network][packets]",(event.get("[session][iflow_pkts]") + event.get("[session][rflow_pkts]")))'
    }

  # Perform conversions for ECS compatibility and remove items we no longer need
  mutate {
      add_field => { "[ecs][version]" => "8.0.0" }
      add_field => { "[event][kind]" => "state" }
      add_field => { "[network][vlan]" => "%{[source][vlan]}" }
      add_field => { "[session][total_bytes]" => "%{[network][bytes]}" }
      add_field => { "[session][total_packets]" => "%{[network][packets]}" }
      rename => { "message" => "[event][original]" }
      rename => { "type" => "[log][protocol]" }
      remove_field => [ "csv_message" ]
      remove_field => [ "protocol" ]
      remove_field => [ "timestamp" ]

    }

}

output {
  elasticsearch {
        hosts    => [ 'elasticsearch' ]
        index => "pensando-fwlog-%{+YYYY.MM.WW}"
    }

  #stdout { codec => rubydebug }
}
